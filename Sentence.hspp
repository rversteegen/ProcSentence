# Ported from GAD'42


# Changes:
# -instead of a HIDE_NUM class, HIDE_NUM and SHOW_NUM are special args that must
#  process a number in form_msg string
# -string members renamed to follow name! convention

# Because other classes can't inherit from Noun, instead
# an object has a nounbase ptr, and a name! member.
# When creating an object like an item or entity

# When creating a temp Noun

#######################   SENTENCES ##########################################


defineconstant(0, obj:name!)
defineconstant(1, obj:pronoun!)
defineconstant(2, obj:unique)
defineconstant(3, obj:always_plural)  # eg Pills
setsizeof  Noun, 4, SIZE4

# A multimethod
script, Thing_get_name, thing, begin
    return(loadstring(thing.name!))
end

script, Thing_get_pronoun, thing, begin
    if (thing.type == type:Noun) then (
        return(loadstring(thing.pronoun!))
    ) else if (thing.type == type:entity) then (
        var(basenoun)
    )
end

script, Thing_get_pronoun, thing, begin
    if (thing.type == type:Noun) then (
        return(loadstring(thing.pronoun!))
    )
end



class Noun(object):
    unique = False
    always_plural = False  #e.g. "Pills"
    name = ""
    pronoun = "it"
    #firstperson = False

    def get_name(self):
        ret = self.name
        if not self.unique and hasattr(self, 'modifier'):
            ret = self.modifier + " " + ret
        return ret
    
    def get_pronoun(self):
        if self.always_plural and self.pronoun == "it":
            return "them"
        return self.pronoun

    def __str__(self):
        return self.get_name()

script, freeNoun, noun, begin
    freestring(noun.name!)
    freestring(noun.pronoun!)
    dealloc:Noun(noun)
end

def pluralise(string):
    if string[-1:] == "s":
        return string + "es"
    else:
        return string + "s"

def possessivise(string):
    "?!?"
    if string == "you":
        return "your"
    elif string == "it":
        return "its"
    elif string[-1:] == "s":
        return string + "'"
    else:
        return string + "'s"

def first_personise(string):
    "special cases go here!"
    if string == "is":
        return "are"
    elif string == "has":
        return "have"
    elif string == "readies":
        return "ready"
    elif string[-2:] == "es" and string not in ("takes", "consumes", "fires", "convulses", "dies", "struggles"):
        return string[:-2]
    elif string[-1:] == "s":
        return string[:-1]
    return string



context = []

class GrammarState(object):
    possess = False
    capitalise = False
    put_the = False
    pluralise = False
    firstperson = False
    put_a = False


defineconstant(-100, HIDE_NUM)
defineconstant(-101, SHOW_NUM)

def form_msg(*parts):
    global context

    """Form a message from a list of free form strings (if prepended with ^, the first
    word is taken as a verb in third person), numbers or HIDE_NUM(number) wrappers
    (causes pluralisation of following word), keywords (strings), and Noun objects. Any word
    after a number is assumed to be a noun and subject to pluralisation.

    keywords are: "'s", "a", "the" (hint to produce 'the' instead of 'a' for following noun)

    If the first argument is False, the string is not capitalised.

    Examples:
    form_msg("the", entity, "^is shot through by", bolts.count, "bolt of energy.", entity, "^is mortally wounded!")
    -> "You are shot through by a bolt of energy. You are mortally wounded!"
    -> "The three-armed ape is shot through by 3 bolts of energy. It is mortally wounded!"

    form_msg("the", entity, "'s", weapon, "explodes as", entity, "^fires it!")
    -> "Your rifle explodes as you fire it!"
    -> "The chemist's Laser Lv-02 explodes as he fires it!"

    form_msg("a", item)
    -> "An eight-sided coin"
    """


script, test_form_msg_check_equal, str1, str2, begin
    if (stringcompare(str1, str2) == false) then (
        trace($1="Error! Got '"), trace(str1), trace($1="'", expected '"), trace(str2), trace($1="'")
    )
end


script, test_form_msg, begin
    var(player, James, weapon, entity, ret, item)
    player = alloc:Noun
    player.name! = savestring($"you")
    player.pronoun! = savestring($"you")
    player.unique = True
    #player.firstperson = True

    James = alloc:Noun
    James.name! = savestring($"James")
    James.pronoun! = savestring($"he")
    James.unique = True

    weapon = alloc:Noun
    weapon.name! = savestring($"rifle")

    entity = alloc:Noun
    entity.name = $"three-armed ape"

    ret = form_msg($"the", player, $"^is shot through by", 1, $"bolt of energy.", player, $"^is mortally wounded!")
    $0="You are shot through by a bolt of energy. You are mortally wounded!"
    test_form_msg_check_equal(ret, 0)
    freestring(ret)

    ret = form_msg($"the", entity, $"^is shot through by", 3, $"bolt of energy.", entity, $"^is mortally wounded!")
    $0="The three-armed ape is shot through by 3 bolts of energy. It is mortally wounded!"
    test_form_msg_check_equal(ret, 0)
    freestring(ret)

    ret = form_msg($"the", player, $"'s", weapon, $"explodes as", player, $"^fires it!")
    $0="Your rifle explodes as you fire it!"
    test_form_msg_check_equal(ret, 0)
    freestring(ret)

    entity = alloc:Noun
    entity.name = $"chemist"
    entity.pronoun = $"he"
    weapon.name = $"Laser Lv-02"
    ret = form_msg($"the", entity, $"'s", weapon, $"explodes as", entity, $"^fires it!")
    $0="The chemist's Laser Lv-02 explodes as he fires it!"
    test_form_msg_check_equal(ret, 0)
    freestring(ret)

    item = alloc:Noun
    item.name = $"eight-sided coin"

    ret = form_msg($"a", item)
    $0="An eight-sided coin"
    test_form_msg_check_equal(ret, 0)
    freestring(ret)

    ret = form_msg($"the", item)
    $0="The eight-sided coin"
    test_form_msg_check_equal(ret, 0)
    freestring(ret)

    freeNoun(player)
    freeNoun(James)
    freeNoun(weapon)
    freeNoun(item)
    freeNoun(entity)

    trace($0="form_msg tests done.")
end